<?php
/**
 * MonthDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  YNAB
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YNAB\Model;

use \ArrayAccess;
use \YNAB\ObjectSerializer;

/**
 * MonthDetail Class Doc Comment
 *
 * @category Class
 * @package  YNAB
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MonthDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MonthDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'month' => '\DateTime',
        'note' => 'string',
        'income' => 'int',
        'budgeted' => 'int',
        'activity' => 'int',
        'toBeBudgeted' => 'int',
        'ageOfMoney' => 'int',
        'deleted' => 'bool',
        'categories' => '\YNAB\Model\Category[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'month' => 'date',
        'note' => null,
        'income' => 'int64',
        'budgeted' => 'int64',
        'activity' => 'int64',
        'toBeBudgeted' => 'int64',
        'ageOfMoney' => 'int32',
        'deleted' => null,
        'categories' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'month' => 'month',
        'note' => 'note',
        'income' => 'income',
        'budgeted' => 'budgeted',
        'activity' => 'activity',
        'toBeBudgeted' => 'to_be_budgeted',
        'ageOfMoney' => 'age_of_money',
        'deleted' => 'deleted',
        'categories' => 'categories'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'month' => 'setMonth',
        'note' => 'setNote',
        'income' => 'setIncome',
        'budgeted' => 'setBudgeted',
        'activity' => 'setActivity',
        'toBeBudgeted' => 'setToBeBudgeted',
        'ageOfMoney' => 'setAgeOfMoney',
        'deleted' => 'setDeleted',
        'categories' => 'setCategories'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'month' => 'getMonth',
        'note' => 'getNote',
        'income' => 'getIncome',
        'budgeted' => 'getBudgeted',
        'activity' => 'getActivity',
        'toBeBudgeted' => 'getToBeBudgeted',
        'ageOfMoney' => 'getAgeOfMoney',
        'deleted' => 'getDeleted',
        'categories' => 'getCategories'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['month'] = isset($data['month']) ? $data['month'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['income'] = isset($data['income']) ? $data['income'] : null;
        $this->container['budgeted'] = isset($data['budgeted']) ? $data['budgeted'] : null;
        $this->container['activity'] = isset($data['activity']) ? $data['activity'] : null;
        $this->container['toBeBudgeted'] = isset($data['toBeBudgeted']) ? $data['toBeBudgeted'] : null;
        $this->container['ageOfMoney'] = isset($data['ageOfMoney']) ? $data['ageOfMoney'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['month'] === null) {
            $invalidProperties[] = "'month' can't be null";
        }
        if ($this->container['income'] === null) {
            $invalidProperties[] = "'income' can't be null";
        }
        if ($this->container['budgeted'] === null) {
            $invalidProperties[] = "'budgeted' can't be null";
        }
        if ($this->container['activity'] === null) {
            $invalidProperties[] = "'activity' can't be null";
        }
        if ($this->container['toBeBudgeted'] === null) {
            $invalidProperties[] = "'toBeBudgeted' can't be null";
        }
        if ($this->container['deleted'] === null) {
            $invalidProperties[] = "'deleted' can't be null";
        }
        if ($this->container['categories'] === null) {
            $invalidProperties[] = "'categories' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets month
     *
     * @return \DateTime
     */
    public function getMonth()
    {
        return $this->container['month'];
    }

    /**
     * Sets month
     *
     * @param \DateTime $month month
     *
     * @return $this
     */
    public function setMonth($month)
    {
        $this->container['month'] = $month;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets income
     *
     * @return int
     */
    public function getIncome()
    {
        return $this->container['income'];
    }

    /**
     * Sets income
     *
     * @param int $income The total amount in transactions categorized to 'Inflow: To be Budgeted' in the month
     *
     * @return $this
     */
    public function setIncome($income)
    {
        $this->container['income'] = $income;

        return $this;
    }

    /**
     * Gets budgeted
     *
     * @return int
     */
    public function getBudgeted()
    {
        return $this->container['budgeted'];
    }

    /**
     * Sets budgeted
     *
     * @param int $budgeted The total amount budgeted in the month
     *
     * @return $this
     */
    public function setBudgeted($budgeted)
    {
        $this->container['budgeted'] = $budgeted;

        return $this;
    }

    /**
     * Gets activity
     *
     * @return int
     */
    public function getActivity()
    {
        return $this->container['activity'];
    }

    /**
     * Sets activity
     *
     * @param int $activity The total amount in transactions in the month, excluding those categorized to 'Inflow: To be Budgeted'
     *
     * @return $this
     */
    public function setActivity($activity)
    {
        $this->container['activity'] = $activity;

        return $this;
    }

    /**
     * Gets toBeBudgeted
     *
     * @return int
     */
    public function getToBeBudgeted()
    {
        return $this->container['toBeBudgeted'];
    }

    /**
     * Sets toBeBudgeted
     *
     * @param int $toBeBudgeted The available amount for 'To be Budgeted'
     *
     * @return $this
     */
    public function setToBeBudgeted($toBeBudgeted)
    {
        $this->container['toBeBudgeted'] = $toBeBudgeted;

        return $this;
    }

    /**
     * Gets ageOfMoney
     *
     * @return int|null
     */
    public function getAgeOfMoney()
    {
        return $this->container['ageOfMoney'];
    }

    /**
     * Sets ageOfMoney
     *
     * @param int|null $ageOfMoney The Age of Money as of the month
     *
     * @return $this
     */
    public function setAgeOfMoney($ageOfMoney)
    {
        $this->container['ageOfMoney'] = $ageOfMoney;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted Whether or not the month has been deleted.  Deleted months will only be included in delta requests.
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \YNAB\Model\Category[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \YNAB\Model\Category[] $categories The budget month categories.  Amounts (budgeted, activity, balance, etc.) are specific to the {month} parameter specified.
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


