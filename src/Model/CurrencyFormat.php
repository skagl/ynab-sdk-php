<?php
/**
 * CurrencyFormat
 *
 * PHP version 5
 *
 * @category Class
 * @package  YNAB
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YNAB\Model;

use \ArrayAccess;
use \YNAB\ObjectSerializer;

/**
 * CurrencyFormat Class Doc Comment
 *
 * @category Class
 * @description The currency format setting for the budget.  In some cases the format will not be available and will be specified as null.
 * @package  YNAB
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CurrencyFormat implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CurrencyFormat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'isoCode' => 'string',
        'exampleFormat' => 'string',
        'decimalDigits' => 'int',
        'decimalSeparator' => 'string',
        'symbolFirst' => 'bool',
        'groupSeparator' => 'string',
        'currencySymbol' => 'string',
        'displaySymbol' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'isoCode' => null,
        'exampleFormat' => null,
        'decimalDigits' => 'int32',
        'decimalSeparator' => null,
        'symbolFirst' => null,
        'groupSeparator' => null,
        'currencySymbol' => null,
        'displaySymbol' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'isoCode' => 'iso_code',
        'exampleFormat' => 'example_format',
        'decimalDigits' => 'decimal_digits',
        'decimalSeparator' => 'decimal_separator',
        'symbolFirst' => 'symbol_first',
        'groupSeparator' => 'group_separator',
        'currencySymbol' => 'currency_symbol',
        'displaySymbol' => 'display_symbol'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'isoCode' => 'setIsoCode',
        'exampleFormat' => 'setExampleFormat',
        'decimalDigits' => 'setDecimalDigits',
        'decimalSeparator' => 'setDecimalSeparator',
        'symbolFirst' => 'setSymbolFirst',
        'groupSeparator' => 'setGroupSeparator',
        'currencySymbol' => 'setCurrencySymbol',
        'displaySymbol' => 'setDisplaySymbol'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'isoCode' => 'getIsoCode',
        'exampleFormat' => 'getExampleFormat',
        'decimalDigits' => 'getDecimalDigits',
        'decimalSeparator' => 'getDecimalSeparator',
        'symbolFirst' => 'getSymbolFirst',
        'groupSeparator' => 'getGroupSeparator',
        'currencySymbol' => 'getCurrencySymbol',
        'displaySymbol' => 'getDisplaySymbol'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['isoCode'] = isset($data['isoCode']) ? $data['isoCode'] : null;
        $this->container['exampleFormat'] = isset($data['exampleFormat']) ? $data['exampleFormat'] : null;
        $this->container['decimalDigits'] = isset($data['decimalDigits']) ? $data['decimalDigits'] : null;
        $this->container['decimalSeparator'] = isset($data['decimalSeparator']) ? $data['decimalSeparator'] : null;
        $this->container['symbolFirst'] = isset($data['symbolFirst']) ? $data['symbolFirst'] : null;
        $this->container['groupSeparator'] = isset($data['groupSeparator']) ? $data['groupSeparator'] : null;
        $this->container['currencySymbol'] = isset($data['currencySymbol']) ? $data['currencySymbol'] : null;
        $this->container['displaySymbol'] = isset($data['displaySymbol']) ? $data['displaySymbol'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['isoCode'] === null) {
            $invalidProperties[] = "'isoCode' can't be null";
        }
        if ($this->container['exampleFormat'] === null) {
            $invalidProperties[] = "'exampleFormat' can't be null";
        }
        if ($this->container['decimalDigits'] === null) {
            $invalidProperties[] = "'decimalDigits' can't be null";
        }
        if ($this->container['decimalSeparator'] === null) {
            $invalidProperties[] = "'decimalSeparator' can't be null";
        }
        if ($this->container['symbolFirst'] === null) {
            $invalidProperties[] = "'symbolFirst' can't be null";
        }
        if ($this->container['groupSeparator'] === null) {
            $invalidProperties[] = "'groupSeparator' can't be null";
        }
        if ($this->container['currencySymbol'] === null) {
            $invalidProperties[] = "'currencySymbol' can't be null";
        }
        if ($this->container['displaySymbol'] === null) {
            $invalidProperties[] = "'displaySymbol' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets isoCode
     *
     * @return string
     */
    public function getIsoCode()
    {
        return $this->container['isoCode'];
    }

    /**
     * Sets isoCode
     *
     * @param string $isoCode isoCode
     *
     * @return $this
     */
    public function setIsoCode($isoCode)
    {
        $this->container['isoCode'] = $isoCode;

        return $this;
    }

    /**
     * Gets exampleFormat
     *
     * @return string
     */
    public function getExampleFormat()
    {
        return $this->container['exampleFormat'];
    }

    /**
     * Sets exampleFormat
     *
     * @param string $exampleFormat exampleFormat
     *
     * @return $this
     */
    public function setExampleFormat($exampleFormat)
    {
        $this->container['exampleFormat'] = $exampleFormat;

        return $this;
    }

    /**
     * Gets decimalDigits
     *
     * @return int
     */
    public function getDecimalDigits()
    {
        return $this->container['decimalDigits'];
    }

    /**
     * Sets decimalDigits
     *
     * @param int $decimalDigits decimalDigits
     *
     * @return $this
     */
    public function setDecimalDigits($decimalDigits)
    {
        $this->container['decimalDigits'] = $decimalDigits;

        return $this;
    }

    /**
     * Gets decimalSeparator
     *
     * @return string
     */
    public function getDecimalSeparator()
    {
        return $this->container['decimalSeparator'];
    }

    /**
     * Sets decimalSeparator
     *
     * @param string $decimalSeparator decimalSeparator
     *
     * @return $this
     */
    public function setDecimalSeparator($decimalSeparator)
    {
        $this->container['decimalSeparator'] = $decimalSeparator;

        return $this;
    }

    /**
     * Gets symbolFirst
     *
     * @return bool
     */
    public function getSymbolFirst()
    {
        return $this->container['symbolFirst'];
    }

    /**
     * Sets symbolFirst
     *
     * @param bool $symbolFirst symbolFirst
     *
     * @return $this
     */
    public function setSymbolFirst($symbolFirst)
    {
        $this->container['symbolFirst'] = $symbolFirst;

        return $this;
    }

    /**
     * Gets groupSeparator
     *
     * @return string
     */
    public function getGroupSeparator()
    {
        return $this->container['groupSeparator'];
    }

    /**
     * Sets groupSeparator
     *
     * @param string $groupSeparator groupSeparator
     *
     * @return $this
     */
    public function setGroupSeparator($groupSeparator)
    {
        $this->container['groupSeparator'] = $groupSeparator;

        return $this;
    }

    /**
     * Gets currencySymbol
     *
     * @return string
     */
    public function getCurrencySymbol()
    {
        return $this->container['currencySymbol'];
    }

    /**
     * Sets currencySymbol
     *
     * @param string $currencySymbol currencySymbol
     *
     * @return $this
     */
    public function setCurrencySymbol($currencySymbol)
    {
        $this->container['currencySymbol'] = $currencySymbol;

        return $this;
    }

    /**
     * Gets displaySymbol
     *
     * @return bool
     */
    public function getDisplaySymbol()
    {
        return $this->container['displaySymbol'];
    }

    /**
     * Sets displaySymbol
     *
     * @param bool $displaySymbol displaySymbol
     *
     * @return $this
     */
    public function setDisplaySymbol($displaySymbol)
    {
        $this->container['displaySymbol'] = $displaySymbol;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


